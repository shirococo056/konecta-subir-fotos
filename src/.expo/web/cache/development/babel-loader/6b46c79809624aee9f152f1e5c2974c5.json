{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Adri\\\\Desktop\\\\subir fotos\\\\src\\\\components\\\\post\\\\add-comment.js\";\nimport { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport FirebaseContext from \"../../context/firebase\";\nimport useUser from \"../../hooks/use-user\";\nimport UserContext from \"../../context/user\";\nexport default function AddComment(_ref) {\n  var docId = _ref.docId,\n      comments = _ref.comments,\n      setComments = _ref.setComments,\n      commentInput = _ref.commentInput;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      comment = _useState2[0],\n      setComment = _useState2[1];\n\n  var _useContext = useContext(FirebaseContext),\n      firebase = _useContext.firebase,\n      FieldValue = _useContext.FieldValue;\n\n  var _useContext2 = useContext(UserContext),\n      uid = _useContext2.user.uid;\n\n  var _useUser = useUser(uid),\n      user = _useUser.user;\n\n  var handleSubmitComment = function handleSubmitComment(event) {\n    event.preventDefault();\n    setComments([].concat(_toConsumableArray(comments), [{\n      displayName: user.username,\n      comment: comment\n    }]));\n    setComment('');\n    return firebase.firestore().collection('photos').doc(docId).update({\n      comments: FieldValue.arrayUnion({\n        displayName: user.username,\n        comment: comment\n      })\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"border-t border-gray-primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, React.createElement(\"form\", {\n    \"data-testid\": \"add-comment-submit-\" + docId,\n    className: \"flex justify-between pl-0 pr-5\",\n    method: \"POST\",\n    onSubmit: function onSubmit(event) {\n      return comment.length >= 1 ? handleSubmitComment(event) : event.preventDefault();\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }\n  }, React.createElement(\"input\", {\n    \"data-testid\": \"add-comment-\" + docId,\n    \"aria-label\": \"Add a comment\",\n    autoComplete: \"off\",\n    className: \"text-sm text-gray-base w-full mr-3 py-5 px-4\",\n    type: \"text\",\n    name: \"add-comment\",\n    placeholder: \"Add a comment...\",\n    value: comment,\n    onChange: function onChange(_ref2) {\n      var target = _ref2.target;\n      return setComment(target.value);\n    },\n    ref: commentInput,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), React.createElement(\"button\", {\n    className: \"text-sm font-bold text-blue-medium \" + (!comment && 'opacity-25'),\n    type: \"button\",\n    disabled: comment.length < 1,\n    onClick: handleSubmitComment,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }, \"Post\")));\n}\nAddComment.propTypes = {\n  docId: PropTypes.string.isRequired,\n  comments: PropTypes.array.isRequired,\n  setComments: PropTypes.func.isRequired,\n  commentInput: PropTypes.object\n};","map":{"version":3,"sources":["C:/Users/Adri/Desktop/subir fotos/src/components/post/add-comment.js"],"names":["useState","useContext","PropTypes","FirebaseContext","useUser","UserContext","AddComment","docId","comments","setComments","commentInput","comment","setComment","firebase","FieldValue","uid","user","handleSubmitComment","event","preventDefault","displayName","username","firestore","collection","doc","update","arrayUnion","length","target","value","propTypes","string","isRequired","array","func","object"],"mappings":"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","sourcesContent":["import { useState, useContext } from 'react';\nimport PropTypes from 'prop-types';\nimport FirebaseContext from '../../context/firebase';\nimport useUser from '../../hooks/use-user';\nimport UserContext from '../../context/user';\n\nexport default function AddComment({ docId, comments, setComments, commentInput }) {\n  const [comment, setComment] = useState('');\n  const { firebase, FieldValue } = useContext(FirebaseContext);\n  const {\n    user: { uid }\n  } = useContext(UserContext);\n  const { user } = useUser(uid);\n\n  const handleSubmitComment = (event) => {\n    event.preventDefault();\n\n    setComments([...comments, { displayName: user.username, comment }]);\n    setComment('');\n\n    return firebase\n      .firestore()\n      .collection('photos')\n      .doc(docId)\n      .update({\n        comments: FieldValue.arrayUnion({ displayName: user.username, comment })\n      });\n  };\n\n  return (\n    <div className=\"border-t border-gray-primary\">\n      <form\n        data-testid={`add-comment-submit-${docId}`}\n        className=\"flex justify-between pl-0 pr-5\"\n        method=\"POST\"\n        onSubmit={(event) =>\n          comment.length >= 1 ? handleSubmitComment(event) : event.preventDefault()\n        }\n      >\n        <input\n          data-testid={`add-comment-${docId}`}\n          aria-label=\"Add a comment\"\n          autoComplete=\"off\"\n          className=\"text-sm text-gray-base w-full mr-3 py-5 px-4\"\n          type=\"text\"\n          name=\"add-comment\"\n          placeholder=\"Add a comment...\"\n          value={comment}\n          onChange={({ target }) => setComment(target.value)}\n          ref={commentInput}\n        />\n        <button\n          className={`text-sm font-bold text-blue-medium ${!comment && 'opacity-25'}`}\n          type=\"button\"\n          disabled={comment.length < 1}\n          onClick={handleSubmitComment}\n        >\n          Post\n        </button>\n      </form>\n    </div>\n  );\n}\n\nAddComment.propTypes = {\n  docId: PropTypes.string.isRequired,\n  comments: PropTypes.array.isRequired,\n  setComments: PropTypes.func.isRequired,\n  commentInput: PropTypes.object\n};\n"]},"metadata":{},"sourceType":"module"}