{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { firebase, FieldValue } from \"../lib/firebase\";\nexport function doesUsernameExist(username) {\n  var result;\n  return _regeneratorRuntime.async(function doesUsernameExist$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(firebase.firestore().collection('users').where('username', '==', username).get());\n\n        case 2:\n          result = _context.sent;\n          return _context.abrupt(\"return\", result.docs.map(function (user) {\n            return user.data().length > 0;\n          }));\n\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getUserByUsername(username) {\n  var result;\n  return _regeneratorRuntime.async(function getUserByUsername$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(firebase.firestore().collection('users').where('username', '==', username).get());\n\n        case 2:\n          result = _context2.sent;\n          return _context2.abrupt(\"return\", result.docs.map(function (item) {\n            return _objectSpread(_objectSpread({}, item.data()), {}, {\n              docId: item.id\n            });\n          }));\n\n        case 4:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getUserByUserId(userId) {\n  var result;\n  return _regeneratorRuntime.async(function getUserByUserId$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(firebase.firestore().collection('users').where('userId', '==', userId).get());\n\n        case 2:\n          result = _context3.sent;\n          return _context3.abrupt(\"return\", result.docs.map(function (item) {\n            return _objectSpread(_objectSpread({}, item.data()), {}, {\n              docId: item.id\n            });\n          }));\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getSuggestedProfiles(userId, following) {\n  var result;\n  return _regeneratorRuntime.async(function getSuggestedProfiles$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(firebase.firestore().collection('users').limit(10).get());\n\n        case 2:\n          result = _context4.sent;\n          return _context4.abrupt(\"return\", result.docs.map(function (user) {\n            return _objectSpread(_objectSpread({}, user.data()), {}, {\n              docId: user.id\n            });\n          }).filter(function (profile) {\n            return profile.userId !== userId && !following.includes(profile.userId);\n          }));\n\n        case 4:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function updateLoggedInUserFollowing(loggedInUserDocId, profileId, isFollowingProfile) {\n  return _regeneratorRuntime.async(function updateLoggedInUserFollowing$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          return _context5.abrupt(\"return\", firebase.firestore().collection('users').doc(loggedInUserDocId).update({\n            following: isFollowingProfile ? FieldValue.arrayRemove(profileId) : FieldValue.arrayUnion(profileId)\n          }));\n\n        case 1:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function updateFollowedUserFollowers(profileDocId, loggedInUserDocId, isFollowingProfile) {\n  return _regeneratorRuntime.async(function updateFollowedUserFollowers$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          return _context6.abrupt(\"return\", firebase.firestore().collection('users').doc(profileDocId).update({\n            followers: isFollowingProfile ? FieldValue.arrayRemove(loggedInUserDocId) : FieldValue.arrayUnion(loggedInUserDocId)\n          }));\n\n        case 1:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getPhotos(userId, following) {\n  var result, userFollowedPhotos, photosWithUserDetails;\n  return _regeneratorRuntime.async(function getPhotos$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return _regeneratorRuntime.awrap(firebase.firestore().collection('photos').where('userId', 'in', following).get());\n\n        case 2:\n          result = _context8.sent;\n          userFollowedPhotos = result.docs.map(function (photo) {\n            return _objectSpread(_objectSpread({}, photo.data()), {}, {\n              docId: photo.id\n            });\n          });\n          _context8.next = 6;\n          return _regeneratorRuntime.awrap(Promise.all(userFollowedPhotos.map(function _callee(photo) {\n            var userLikedPhoto, user, username;\n            return _regeneratorRuntime.async(function _callee$(_context7) {\n              while (1) {\n                switch (_context7.prev = _context7.next) {\n                  case 0:\n                    userLikedPhoto = false;\n\n                    if (photo.likes.includes(userId)) {\n                      userLikedPhoto = true;\n                    }\n\n                    _context7.next = 4;\n                    return _regeneratorRuntime.awrap(getUserByUserId(photo.userId));\n\n                  case 4:\n                    user = _context7.sent;\n                    username = user[0].username;\n                    return _context7.abrupt(\"return\", _objectSpread(_objectSpread({\n                      username: username\n                    }, photo), {}, {\n                      userLikedPhoto: userLikedPhoto\n                    }));\n\n                  case 7:\n                  case \"end\":\n                    return _context7.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          })));\n\n        case 6:\n          photosWithUserDetails = _context8.sent;\n          return _context8.abrupt(\"return\", photosWithUserDetails);\n\n        case 8:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getUserPhotosByUsername(username) {\n  var _await$getUserByUsern, _await$getUserByUsern2, user, result;\n\n  return _regeneratorRuntime.async(function getUserPhotosByUsername$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return _regeneratorRuntime.awrap(getUserByUsername(username));\n\n        case 2:\n          _await$getUserByUsern = _context9.sent;\n          _await$getUserByUsern2 = _slicedToArray(_await$getUserByUsern, 1);\n          user = _await$getUserByUsern2[0];\n          _context9.next = 7;\n          return _regeneratorRuntime.awrap(firebase.firestore().collection('photos').where('userId', '==', user.userId).get());\n\n        case 7:\n          result = _context9.sent;\n          return _context9.abrupt(\"return\", result.docs.map(function (item) {\n            return _objectSpread(_objectSpread({}, item.data()), {}, {\n              docId: item.id\n            });\n          }));\n\n        case 9:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function isUserFollowingProfile(loggedInUserUsername, profileUserId) {\n  var result, _result$docs$map, _result$docs$map2, _result$docs$map2$, response;\n\n  return _regeneratorRuntime.async(function isUserFollowingProfile$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return _regeneratorRuntime.awrap(firebase.firestore().collection('users').where('username', '==', loggedInUserUsername).where('following', 'array-contains', profileUserId).get());\n\n        case 2:\n          result = _context10.sent;\n          _result$docs$map = result.docs.map(function (item) {\n            return _objectSpread(_objectSpread({}, item.data()), {}, {\n              docId: item.id\n            });\n          }), _result$docs$map2 = _slicedToArray(_result$docs$map, 1), _result$docs$map2$ = _result$docs$map2[0], response = _result$docs$map2$ === void 0 ? {} : _result$docs$map2$;\n          return _context10.abrupt(\"return\", response.userId);\n\n        case 5:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function toggleFollow(isFollowingProfile, activeUserDocId, profileDocId, profileUserId, followingUserId) {\n  return _regeneratorRuntime.async(function toggleFollow$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return _regeneratorRuntime.awrap(updateLoggedInUserFollowing(activeUserDocId, profileUserId, isFollowingProfile));\n\n        case 2:\n          _context11.next = 4;\n          return _regeneratorRuntime.awrap(updateFollowedUserFollowers(profileDocId, followingUserId, isFollowingProfile));\n\n        case 4:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["C:/Users/Adri/Desktop/subir fotos/src/services/firebase.js"],"names":["firebase","FieldValue","doesUsernameExist","username","firestore","collection","where","get","result","docs","map","user","data","length","getUserByUsername","item","docId","id","getUserByUserId","userId","getSuggestedProfiles","following","limit","filter","profile","includes","updateLoggedInUserFollowing","loggedInUserDocId","profileId","isFollowingProfile","doc","update","arrayRemove","arrayUnion","updateFollowedUserFollowers","profileDocId","followers","getPhotos","userFollowedPhotos","photo","Promise","all","userLikedPhoto","likes","photosWithUserDetails","getUserPhotosByUsername","isUserFollowingProfile","loggedInUserUsername","profileUserId","response","toggleFollow","activeUserDocId","followingUserId"],"mappings":";;;;;;;;AAAA,SAASA,QAAT,EAAmBC,UAAnB;AAEA,OAAO,SAAeC,iBAAf,CAAiCC,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACgBH,QAAQ,CAC1BI,SADkB,GAElBC,UAFkB,CAEP,OAFO,EAGlBC,KAHkB,CAGZ,UAHY,EAGA,IAHA,EAGMH,QAHN,EAIlBI,GAJkB,EADhB;;AAAA;AACCC,UAAAA,MADD;AAAA,2CAOEA,MAAM,CAACC,IAAP,CAAYC,GAAZ,CAAgB,UAACC,IAAD;AAAA,mBAAUA,IAAI,CAACC,IAAL,GAAYC,MAAZ,GAAqB,CAA/B;AAAA,WAAhB,CAPF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUP,OAAO,SAAeC,iBAAf,CAAiCX,QAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACgBH,QAAQ,CAC1BI,SADkB,GAElBC,UAFkB,CAEP,OAFO,EAGlBC,KAHkB,CAGZ,UAHY,EAGA,IAHA,EAGMH,QAHN,EAIlBI,GAJkB,EADhB;;AAAA;AACCC,UAAAA,MADD;AAAA,4CAOEA,MAAM,CAACC,IAAP,CAAYC,GAAZ,CAAgB,UAACK,IAAD;AAAA,mDAClBA,IAAI,CAACH,IAAL,EADkB;AAErBI,cAAAA,KAAK,EAAED,IAAI,CAACE;AAFS;AAAA,WAAhB,CAPF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcP,OAAO,SAAeC,eAAf,CAA+BC,MAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACgBnB,QAAQ,CAACI,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,EAAyCC,KAAzC,CAA+C,QAA/C,EAAyD,IAAzD,EAA+Da,MAA/D,EAAuEZ,GAAvE,EADhB;;AAAA;AACCC,UAAAA,MADD;AAAA,4CAEEA,MAAM,CAACC,IAAP,CAAYC,GAAZ,CAAgB,UAACK,IAAD;AAAA,mDAClBA,IAAI,CAACH,IAAL,EADkB;AAErBI,cAAAA,KAAK,EAAED,IAAI,CAACE;AAFS;AAAA,WAAhB,CAFF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQP,OAAO,SAAeG,oBAAf,CAAoCD,MAApC,EAA4CE,SAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACgBrB,QAAQ,CAACI,SAAT,GAAqBC,UAArB,CAAgC,OAAhC,EAAyCiB,KAAzC,CAA+C,EAA/C,EAAmDf,GAAnD,EADhB;;AAAA;AACCC,UAAAA,MADD;AAAA,4CAGEA,MAAM,CAACC,IAAP,CACJC,GADI,CACA,UAACC,IAAD;AAAA,mDAAgBA,IAAI,CAACC,IAAL,EAAhB;AAA6BI,cAAAA,KAAK,EAAEL,IAAI,CAACM;AAAzC;AAAA,WADA,EAEJM,MAFI,CAEG,UAACC,OAAD;AAAA,mBAAaA,OAAO,CAACL,MAAR,KAAmBA,MAAnB,IAA6B,CAACE,SAAS,CAACI,QAAV,CAAmBD,OAAO,CAACL,MAA3B,CAA3C;AAAA,WAFH,CAHF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQP,OAAO,SAAeO,2BAAf,CACLC,iBADK,EAELC,SAFK,EAGLC,kBAHK;AAAA;AAAA;AAAA;AAAA;AAAA,4CAKE7B,QAAQ,CACZI,SADI,GAEJC,UAFI,CAEO,OAFP,EAGJyB,GAHI,CAGAH,iBAHA,EAIJI,MAJI,CAIG;AACNV,YAAAA,SAAS,EAAEQ,kBAAkB,GACzB5B,UAAU,CAAC+B,WAAX,CAAuBJ,SAAvB,CADyB,GAEzB3B,UAAU,CAACgC,UAAX,CAAsBL,SAAtB;AAHE,WAJH,CALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBP,OAAO,SAAeM,2BAAf,CACLC,YADK,EAELR,iBAFK,EAGLE,kBAHK;AAAA;AAAA;AAAA;AAAA;AAAA,4CAKE7B,QAAQ,CACZI,SADI,GAEJC,UAFI,CAEO,OAFP,EAGJyB,GAHI,CAGAK,YAHA,EAIJJ,MAJI,CAIG;AACNK,YAAAA,SAAS,EAAEP,kBAAkB,GACzB5B,UAAU,CAAC+B,WAAX,CAAuBL,iBAAvB,CADyB,GAEzB1B,UAAU,CAACgC,UAAX,CAAsBN,iBAAtB;AAHE,WAJH,CALF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBP,OAAO,SAAeU,SAAf,CAAyBlB,MAAzB,EAAiCE,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAEgBrB,QAAQ,CAC1BI,SADkB,GAElBC,UAFkB,CAEP,QAFO,EAGlBC,KAHkB,CAGZ,QAHY,EAGF,IAHE,EAGIe,SAHJ,EAIlBd,GAJkB,EAFhB;;AAAA;AAECC,UAAAA,MAFD;AAQC8B,UAAAA,kBARD,GAQsB9B,MAAM,CAACC,IAAP,CAAYC,GAAZ,CAAgB,UAAC6B,KAAD;AAAA,mDACtCA,KAAK,CAAC3B,IAAN,EADsC;AAEzCI,cAAAA,KAAK,EAAEuB,KAAK,CAACtB;AAF4B;AAAA,WAAhB,CARtB;AAAA;AAAA,2CAa+BuB,OAAO,CAACC,GAAR,CAClCH,kBAAkB,CAAC5B,GAAnB,CAAuB,iBAAO6B,KAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACjBG,oBAAAA,cADiB,GACA,KADA;;AAErB,wBAAIH,KAAK,CAACI,KAAN,CAAYlB,QAAZ,CAAqBN,MAArB,CAAJ,EAAkC;AAChCuB,sBAAAA,cAAc,GAAG,IAAjB;AACD;;AAJoB;AAAA,qDAMFxB,eAAe,CAACqB,KAAK,CAACpB,MAAP,CANb;;AAAA;AAMfR,oBAAAA,IANe;AAQbR,oBAAAA,QARa,GAQAQ,IAAI,CAAC,CAAD,CARJ,CAQbR,QARa;AAAA;AASZA,sBAAAA,QAAQ,EAARA;AATY,uBASCoC,KATD;AASQG,sBAAAA,cAAc,EAAdA;AATR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAvB,CADkC,CAb/B;;AAAA;AAaCE,UAAAA,qBAbD;AAAA,4CA2BEA,qBA3BF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA8BP,OAAO,SAAeC,uBAAf,CAAuC1C,QAAvC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACgBW,iBAAiB,CAACX,QAAD,CADjC;;AAAA;AAAA;AAAA;AACEQ,UAAAA,IADF;AAAA;AAAA,2CAEgBX,QAAQ,CAC1BI,SADkB,GAElBC,UAFkB,CAEP,QAFO,EAGlBC,KAHkB,CAGZ,QAHY,EAGF,IAHE,EAGIK,IAAI,CAACQ,MAHT,EAIlBZ,GAJkB,EAFhB;;AAAA;AAECC,UAAAA,MAFD;AAAA,4CAQEA,MAAM,CAACC,IAAP,CAAYC,GAAZ,CAAgB,UAACK,IAAD;AAAA,mDAClBA,IAAI,CAACH,IAAL,EADkB;AAErBI,cAAAA,KAAK,EAAED,IAAI,CAACE;AAFS;AAAA,WAAhB,CARF;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcP,OAAO,SAAe6B,sBAAf,CAAsCC,oBAAtC,EAA4DC,aAA5D;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACgBhD,QAAQ,CAC1BI,SADkB,GAElBC,UAFkB,CAEP,OAFO,EAGlBC,KAHkB,CAGZ,UAHY,EAGA,IAHA,EAGMyC,oBAHN,EAIlBzC,KAJkB,CAIZ,WAJY,EAIC,gBAJD,EAImB0C,aAJnB,EAKlBzC,GALkB,EADhB;;AAAA;AACCC,UAAAA,MADD;AAAA,6BAQmBA,MAAM,CAACC,IAAP,CAAYC,GAAZ,CAAgB,UAACK,IAAD;AAAA,mDACnCA,IAAI,CAACH,IAAL,EADmC;AAEtCI,cAAAA,KAAK,EAAED,IAAI,CAACE;AAF0B;AAAA,WAAhB,CARnB,sGAQEgC,QARF,mCAQa,EARb;AAAA,6CAaEA,QAAQ,CAAC9B,MAbX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAgBP,OAAO,SAAe+B,YAAf,CACLrB,kBADK,EAELsB,eAFK,EAGLhB,YAHK,EAILa,aAJK,EAKLI,eALK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CAUC1B,2BAA2B,CAACyB,eAAD,EAAkBH,aAAlB,EAAiCnB,kBAAjC,CAV5B;;AAAA;AAAA;AAAA,2CAeCK,2BAA2B,CAACC,YAAD,EAAeiB,eAAf,EAAgCvB,kBAAhC,CAf5B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { firebase, FieldValue } from '../lib/firebase';\n\nexport async function doesUsernameExist(username) {\n  const result = await firebase\n    .firestore()\n    .collection('users')\n    .where('username', '==', username)\n    .get();\n\n  return result.docs.map((user) => user.data().length > 0);\n}\n\nexport async function getUserByUsername(username) {\n  const result = await firebase\n    .firestore()\n    .collection('users')\n    .where('username', '==', username)\n    .get();\n\n  return result.docs.map((item) => ({\n    ...item.data(),\n    docId: item.id\n  }));\n}\n\n// get user from the firestore where userId === userId (passed from the auth)\nexport async function getUserByUserId(userId) {\n  const result = await firebase.firestore().collection('users').where('userId', '==', userId).get();\n  return result.docs.map((item) => ({\n    ...item.data(),\n    docId: item.id\n  }));\n}\n\nexport async function getSuggestedProfiles(userId, following) {\n  const result = await firebase.firestore().collection('users').limit(10).get();\n\n  return result.docs\n    .map((user) => ({ ...user.data(), docId: user.id }))\n    .filter((profile) => profile.userId !== userId && !following.includes(profile.userId));\n}\n\nexport async function updateLoggedInUserFollowing(\n  loggedInUserDocId, // currently logged in user document id (adrian's profile)\n  profileId, // the user that adrian requests to follow\n  isFollowingProfile // true/false (am i currently following this person?)\n) {\n  return firebase\n    .firestore()\n    .collection('users')\n    .doc(loggedInUserDocId)\n    .update({\n      following: isFollowingProfile\n        ? FieldValue.arrayRemove(profileId)\n        : FieldValue.arrayUnion(profileId)\n    });\n}\n\nexport async function updateFollowedUserFollowers(\n  profileDocId, // currently logged in user document id (adrian's profile)\n  loggedInUserDocId, // the user that adrian requests to follow\n  isFollowingProfile // true/false (am i currently following this person?)\n) {\n  return firebase\n    .firestore()\n    .collection('users')\n    .doc(profileDocId)\n    .update({\n      followers: isFollowingProfile\n        ? FieldValue.arrayRemove(loggedInUserDocId)\n        : FieldValue.arrayUnion(loggedInUserDocId)\n    });\n}\n\nexport async function getPhotos(userId, following) {\n  // [5,4,2] => following\n  const result = await firebase\n    .firestore()\n    .collection('photos')\n    .where('userId', 'in', following)\n    .get();\n\n  const userFollowedPhotos = result.docs.map((photo) => ({\n    ...photo.data(),\n    docId: photo.id\n  }));\n\n  const photosWithUserDetails = await Promise.all(\n    userFollowedPhotos.map(async (photo) => {\n      let userLikedPhoto = false;\n      if (photo.likes.includes(userId)) {\n        userLikedPhoto = true;\n      }\n      // photo.userId = 2\n      const user = await getUserByUserId(photo.userId);\n      // raphael\n      const { username } = user[0];\n      return { username, ...photo, userLikedPhoto };\n    })\n  );\n\n  return photosWithUserDetails;\n}\n\nexport async function getUserPhotosByUsername(username) {\n  const [user] = await getUserByUsername(username);\n  const result = await firebase\n    .firestore()\n    .collection('photos')\n    .where('userId', '==', user.userId)\n    .get();\n\n  return result.docs.map((item) => ({\n    ...item.data(),\n    docId: item.id\n  }));\n}\n\nexport async function isUserFollowingProfile(loggedInUserUsername, profileUserId) {\n  const result = await firebase\n    .firestore()\n    .collection('users')\n    .where('username', '==', loggedInUserUsername) // adrian (active logged in user)\n    .where('following', 'array-contains', profileUserId)\n    .get();\n\n  const [response = {}] = result.docs.map((item) => ({\n    ...item.data(),\n    docId: item.id\n  }));\n\n  return response.userId;\n}\n\nexport async function toggleFollow(\n  isFollowingProfile,\n  activeUserDocId,\n  profileDocId,\n  profileUserId,\n  followingUserId\n) {\n  // 1st param: adrian's doc id\n  // 2nd param: raphael's user id\n  // 3rd param: is the user following this profile? e.g. does adrian follow raphael? (true/false)\n  await updateLoggedInUserFollowing(activeUserDocId, profileUserId, isFollowingProfile);\n\n  // 1st param: adrian's user id\n  // 2nd param: raphael's doc id\n  // 3rd param: is the user following this profile? e.g. does adrian follow raphael? (true/false)\n  await updateFollowedUserFollowers(profileDocId, followingUserId, isFollowingProfile);\n}\n"]},"metadata":{},"sourceType":"module"}